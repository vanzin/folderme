#!/usr/bin/env python3
# SPDX-License-Identifier: BSD-2-Clause
import argparse
import sys

import app
import browser
import config
import ipc
import osd
import randomizer
import util
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QMenu
from PyQt5.QtWidgets import QSystemTrayIcon

BaseMainWindow = util.compile_ui("main.ui")


class TrayIcon(QSystemTrayIcon, util.Listener):
    def __init__(self, ui):
        QSystemTrayIcon.__init__(self, QIcon(util.icon("folderme.png")))
        self.ui = ui

        menu = QMenu()

        a = menu.addAction(QIcon(util.icon("play.png")), "Play")
        a.triggered.connect(app.get().playlist.playpause)

        a = menu.addAction(QIcon(util.icon("pause.png")), "Pause")
        a.triggered.connect(app.get().playlist.playpause)

        a = menu.addAction(QIcon(util.icon("stop.png")), "Stop")
        a.triggered.connect(app.get().playlist.playpause)

        a = menu.addAction(QIcon(util.icon("quit.png")), "Quit")
        a.triggered.connect(self.ui.handleQuit)

        self.setContextMenu(menu)

        self.activated.connect(self._activated)
        self.setToolTip("Stopped")
        util.EventBus.add(self)

    def _activated(self, reason):
        if reason != self.Trigger:
            return

        if self.ui.isVisible():
            self.ui.hide()
        else:
            self.ui.show()
            self.ui.raise_()

    def track_playing(self, track):
        self.setToolTip(f"Playing: {track.artist} - {track.title}")

    def track_paused(self, track):
        self.setToolTip(f"Paused: {track.artist} - {track.title}")

    def track_stopped(self, track):
        self.setToolTip(f"Stopped")


class MainWindow(BaseMainWindow, util.Listener):
    def __init__(self, args):
        BaseMainWindow.__init__(self)

        c = app.get().collection
        util.EventBus.add(self)

        p = app.get().playlist
        p.init_ui(self)

        self.driver = randomizer.Randomizer.load()

        self.playPause.clicked.connect(self.handlePlayPause)
        self.next.clicked.connect(p.next)
        self.previous.clicked.connect(p.prev)
        self.stop.clicked.connect(p.stop)

        tools = QMenu()

        a = tools.addAction("Browser")
        a.triggered.connect(self.show_browser)

        a = tools.addAction("Next Album")
        a.triggered.connect(self.driver.pick_next)

        a = tools.addAction("Rescan Collection")
        a.triggered.connect(self.rescan)

        a = tools.addAction("Config")
        a.triggered.connect(self.show_config)

        a = tools.addAction("Quit")
        a.triggered.connect(self.handleQuit)

        self.bTools.setMenu(tools)

        self.playlistUI.setFocus()
        util.restore_ui(self, "main")

    def handlePlayPause(self):
        if not app.get().playlist.albums:
            self.driver.pick_next()
        app.get().playlist.playpause()

    def handleQuit(self):
        util.EventBus.send(util.Listener.ui_exit)
        self.driver.save()
        util.save_ui(self, "main")
        app.get().exit()

    def resizeEvent(self, e):
        super().resizeEvent(e)
        util.EventBus.send(util.Listener.ui_resized, self)

    def showEvent(self, e):
        super().showEvent(e)
        util.EventBus.send(util.Listener.ui_resized, self)

    def closeEvent(self, e):
        util.save_ui(self, "main")
        super().closeEvent(e)

    def show_browser(self):
        browser.BrowseDialog(self).show()

    def show_config(self):
        cfg = config.ConfigDialog()
        cfg.exec()

    def collection_changed(self):
        self.repaint()

    def rescan(self):
        app.get().collection.scan(self)


def start(args):
    app.init(args)

    if not app.get().collection.albums:
        cfg = config.ConfigDialog()
        cfg.exec()

    if app.get().collection.needs_rescan():
        app.get().collection.scan()

    mainUI = MainWindow(args)
    osd.init()

    if not args.no_dbus:
        server = ipc.Server(mainUI)

    tray = TrayIcon(mainUI)
    tray.show()

    if args.show:
        mainUI.show()

    sys.exit(app.get().exec())


def main(argv):
    parser = argparse.ArgumentParser(description="FolderME music player")
    parser.add_argument(
        "--remote", metavar="CMD", help="send CMD to FolderME dbus service"
    )
    parser.add_argument(
        "--show", action="store_true", default=False, help="show UI on startup"
    )
    parser.add_argument(
        "--no-dbus",
        action="store_true",
        default=False,
        help="do not start dbus service",
    )
    parser.add_argument(
        "--no-lastfm",
        action="store_true",
        default=False,
        help="do not scrobble to last.fm",
    )
    args = parser.parse_args(argv[1:])

    if args.remote:
        ipc.send(args.remote)
        sys.exit(0)

    start(args)


if __name__ == "__main__":
    main(sys.argv)
