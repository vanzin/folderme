#!/usr/bin/env python3
# SPDX-License-Identifier: BSD-2-Clause

import collection
import ipc
import playlist
import randomizer
import sys
import time
import util
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QMainWindow, QMenu, QSystemTrayIcon


class UIListener(util.EventSource):
    def ui_resized(self, widget):
        pass

    def ui_exit(self):
        pass


class TrayIcon(QSystemTrayIcon):
    def __init__(self, ui):
        QSystemTrayIcon.__init__(self, QIcon(util.icon("folderme.png")))
        self.ui = ui

        menu = QMenu()

        a = menu.addAction(QIcon(util.icon("play.png")), "Play")
        a.triggered.connect(self.ui.playlist.playpause)

        a = menu.addAction(QIcon(util.icon("pause.png")), "Pause")
        a.triggered.connect(self.ui.playlist.playpause)

        a = menu.addAction(QIcon(util.icon("stop.png")), "Stop")
        a.triggered.connect(self.ui.playlist.playpause)

        a = menu.addAction(QIcon(util.icon("quit.png")), "Quit")
        a.triggered.connect(self.ui.handleQuit)

        self.setContextMenu(menu)

        self.activated.connect(self._activated)

    def _activated(self, reason):
        if reason != self.Trigger:
            return

        if self.ui.isVisible():
            self.ui.hide()
        else:
            self.ui.show()


class MainWindow(QMainWindow, util.EventSource, util.StatefulUI):
    def __init__(self):
        QMainWindow.__init__(self)
        util.EventSource.__init__(self)
        util.StatefulUI.__init__(self, "main")
        util.init_ui(self, "main.ui")
        self.restore_ui()

        self.collection = util.load_config(collection.Collection)
        print(f"Loaded {len(self.collection.albums)} albums.")
        if not self.collection.albums:
            print("Scanning...")
            self.collection.scan()
            print(f"Found {len(self.collection.albums)} albums.")
            util.save_config(self.collection)

        self.playlist = util.load_config(playlist.Playlist)
        self.playlist.init_ui(self)

        self.driver = randomizer.Randomizer(self.collection, self.playlist)

        self.playPause.clicked.connect(self.handlePlayPause)
        self.quit.clicked.connect(self.handleQuit)
        self.next.clicked.connect(self.playlist.next)
        self.previous.clicked.connect(self.playlist.prev)
        self.newAlbum.clicked.connect(self.driver.pick_next)
        self.stop.clicked.connect(self.playlist.stop)

        self.playlistUI.setFocus()

    def handlePlayPause(self):
        if not self.playlist.albums:
            self.driver.pick_next()
        self.playlist.playpause()

    def handleQuit(self):
        self.fire_event(UIListener.ui_exit)
        self.save_ui()
        QApplication.instance().quit()

    def resizeEvent(self, e):
        QMainWindow.resizeEvent(self, e)
        self.fire_event(UIListener.ui_resized, self)

    def showEvent(self, e):
        QMainWindow.showEvent(self, e)
        self.fire_event(UIListener.ui_resized, self)

    def closeEvent(self, e):
        self.save_ui()
        QMainWindow.closeEvent(self, e)


def start():
    app = QApplication(sys.argv)
    app.setWindowIcon(QIcon(util.icon("folderme.png")))

    mainUI = MainWindow()

    server = ipc.Server(mainUI)

    tray = TrayIcon(mainUI)
    tray.show()

    sys.exit(app.exec_())


def main():
    if "--remote" in sys.argv:
        sys.exit(ipc.main(sys.argv))

    start()


if __name__ == "__main__":
    main()
