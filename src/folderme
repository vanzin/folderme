#!/usr/bin/env python3
# SPDX-License-Identifier: BSD-2-Clause

import argparse
import browser
import collection
import ipc
import lastfm
import media
import osd
import playlist
import randomizer
import sys
import time
import util
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QMainWindow, QMenu, QSystemTrayIcon


class UIListener(util.EventSource):
    def ui_resized(self, widget):
        pass

    def ui_exit(self):
        pass


class TrayIcon(QSystemTrayIcon, playlist.Listener, media.Listener):
    def __init__(self, ui):
        QSystemTrayIcon.__init__(self, QIcon(util.icon("folderme.png")))
        self.ui = ui

        menu = QMenu()

        a = menu.addAction(QIcon(util.icon("play.png")), "Play")
        a.triggered.connect(self.ui.playlist.playpause)

        a = menu.addAction(QIcon(util.icon("pause.png")), "Pause")
        a.triggered.connect(self.ui.playlist.playpause)

        a = menu.addAction(QIcon(util.icon("stop.png")), "Stop")
        a.triggered.connect(self.ui.playlist.playpause)

        a = menu.addAction(QIcon(util.icon("quit.png")), "Quit")
        a.triggered.connect(self.ui.handleQuit)

        self.setContextMenu(menu)

        self.activated.connect(self._activated)
        self.setToolTip("Stopped")
        self.ui.playlist.add_listener(self)

    def _activated(self, reason):
        if reason != self.Trigger:
            return

        if self.ui.isVisible():
            self.ui.hide()
        else:
            self.ui.show()

    def track_playing(self, player):
        track = self.ui.playlist.current_track()
        self.setToolTip(f"Playing: {track.info.artist} - {track.info.title}")

    def track_paused(self, player):
        track = self.ui.playlist.current_track()
        self.setToolTip(f"Paused: {track.info.artist} - {track.info.title}")

    def track_stopped(self, player):
        self.setToolTip(f"Stopped")


class MainWindow(QMainWindow, util.EventSource, collection.Listener):
    def __init__(self, args):
        QMainWindow.__init__(self)
        util.EventSource.__init__(self)
        util.init_ui(self, "main.ui")

        self.collection = util.load_config(collection.Collection)
        self.collection.add_listener(self)

        print(f"Loaded {len(self.collection.albums)} albums.")
        if not self.collection.albums:
            print("Scanning...")
            self.collection.scan()
            print(f"Found {len(self.collection.albums)} albums.")
            util.save_config(self.collection)

        self.playlist = util.load_config(playlist.Playlist)
        self.playlist.init_ui(self)
        self.osd = osd.OSD(self.playlist.player())

        self.driver = randomizer.Randomizer(self.collection, self.playlist)

        self.playPause.clicked.connect(self.handlePlayPause)
        self.quit.clicked.connect(self.handleQuit)
        self.next.clicked.connect(self.playlist.next)
        self.previous.clicked.connect(self.playlist.prev)
        self.newAlbum.clicked.connect(self.driver.pick_next)
        self.stop.clicked.connect(self.playlist.stop)
        self.browse.clicked.connect(self.show_browser)

        self.scrobbler = None
        if not args.no_lastfm:
            self.scrobbler = lastfm.get_scrobbler()
            if self.scrobbler:
                self.playlist.add_listener(self.scrobbler)

        self.playlistUI.setFocus()
        util.restore_ui(self, "main")

    def handlePlayPause(self):
        if not self.playlist.albums:
            self.driver.pick_next()
        self.playlist.playpause()

    def handleQuit(self):
        self.fire_event(UIListener.ui_exit)
        util.save_ui(self, "main")
        if self.scrobbler:
            self.scrobbler.shutdown()
        QApplication.instance().quit()

    def resizeEvent(self, e):
        QMainWindow.resizeEvent(self, e)
        self.fire_event(UIListener.ui_resized, self)

    def showEvent(self, e):
        QMainWindow.showEvent(self, e)
        self.fire_event(UIListener.ui_resized, self)

    def closeEvent(self, e):
        util.save_ui(self, "main")
        QMainWindow.closeEvent(self, e)

    def show_browser(self):
        browser.BrowseDialog(self, self.collection).show()

    def collection_changed(self, collection):
        self.repaint()


def start(args):
    app = QApplication(sys.argv)
    app.setWindowIcon(QIcon(util.icon("folderme.png")))

    mainUI = MainWindow(args)

    if not args.no_dbus:
        server = ipc.Server(mainUI)

    tray = TrayIcon(mainUI)
    tray.show()

    if args.show:
        mainUI.show()

    sys.exit(app.exec_())


def main(argv):
    parser = argparse.ArgumentParser(description="FolderME music player")
    parser.add_argument(
        "--remote", metavar="CMD", help="send CMD to FolderME dbus service"
    )
    parser.add_argument(
        "--show", action="store_true", default=False, help="show UI on startup"
    )
    parser.add_argument(
        "--no-dbus",
        action="store_true",
        default=False,
        help="do not start dbus service",
    )
    parser.add_argument(
        "--no-lastfm",
        action="store_true",
        default=False,
        help="do not scrobble to last.fm",
    )
    args = parser.parse_args(argv[1:])

    if args.remote:
        ipc.send(args.remote)
        sys.exit(0)

    start(args)


if __name__ == "__main__":
    main(sys.argv)
